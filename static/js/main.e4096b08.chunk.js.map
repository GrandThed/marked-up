{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["md","require","txt","App","Component","TextAreaRaw","props","state","html","__html","render","value","handleChange","bind","btnGit","copyHTML","pasteTXT","e","this","setState","target","window","open","write","read","then","string","id","onChange","class","placeholder","onClick","className","dangerouslySetInnerHTML","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oSAOMA,EAAK,IADQC,EAAQ,KAErBC,EAAG,irCAiDHC,E,uKAEF,OACE,6BACE,kBAAC,EAAD,W,GAJUC,aAUZC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAO,CAACC,OAAST,EAAGU,OAAOR,IAC3BS,MAAQT,GAEV,EAAKU,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBATA,E,yDAYLI,GACXC,KAAKC,SAAS,CACZR,MAAQM,EAAEG,OAAOT,MACjBH,KAAO,CAACC,OAAST,EAAGU,OAAOO,EAAEG,OAAOT,Y,+BAKtCU,OAAOC,KAAK,iD,iCAIZC,YAAML,KAAKX,MAAME,U,iCAGR,IAAD,OACRe,cAAOC,MAAK,SAAAC,GACV,EAAKP,SAAS,CACZR,MAAQe,S,+BASZ,OACE,yBAAKC,GAAG,QACN,8BAAUA,GAAG,SAAShB,MAAOO,KAAKX,MAAMI,MAAOiB,SAAUV,KAAKN,aAAciB,MAAM,YAAYC,YAAY,mBAC1G,yBAAKH,GAAG,eACN,4BAAQI,QAASb,KAAKJ,OAAQa,GAAG,UAAUK,UAAU,eAAe,kBAAC,IAAD,OACpE,4BAAQD,QAASb,KAAKF,SAAUW,GAAG,UAAUK,UAAU,eAAe,kBAAC,IAAD,QAExE,yBAAKL,GAAG,UAAUM,wBAAyBf,KAAKX,MAAMC,OACtD,yBAAKmB,GAAG,cACN,4BAAQI,QAASb,KAAKH,SAAUY,GAAG,YAAW,kBAAC,IAAD,a,GAjD9BvB,aAwDXD,IC/GK+B,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAAS5B,OACP,kBAAC,IAAM6B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4096b08.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {AiFillGithub, AiFillDelete, AiFillCopy} from 'react-icons/ai';\nimport { FiExternalLink } from \"react-icons/fi\";\nimport { FaPaste } from \"react-icons/fa\";\nimport { write, read } from \"clipboardy\";\nconst MarkItDown = require(\"markdown-it\")\nconst md = new MarkItDown()\nconst txt = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n \\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TextAreaRaw />\n      </div>\n    );\n  }\n}\n\nclass TextAreaRaw extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      html : {__html : md.render(txt)},\n      value : txt\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.btnGit = this.btnGit.bind(this)\n    this.copyHTML = this.copyHTML.bind(this)\n    this.pasteTXT = this.pasteTXT.bind(this)\n  }\n\n  handleChange(e){\n    this.setState({\n      value : e.target.value,\n      html : {__html : md.render(e.target.value)}\n    })\n  }\n\n  btnGit(){\n    window.open(\"https://github.com/GrandThed/mark-previewer\")\n  }\n\n  copyHTML(){\n    write(this.state.__html)\n  }\n\n  pasteTXT(){\n    read().then(string => {\n      this.setState({\n        value : string\n      })\n    })\n    // this.setState({\n    //   value : read().then(ret => {return ret})\n    // })\n  }\n\n  render() {\n    return (\n      <div id=\"page\">\n        <textarea id=\"editor\" value={this.state.value} onChange={this.handleChange} class=\"textinput\" placeholder=\"Your code here\"></textarea>\n        <div id=\"buttons-abs\">\n          <button onClick={this.btnGit} id=\"btn-git\" className=\"btn btn-abs\" ><AiFillGithub/></button>\n          <button onClick={this.pasteTXT} id=\"btn-git\" className=\"btn btn-abs\" ><FaPaste/></button>\n        </div>\n        <div id=\"preview\" dangerouslySetInnerHTML={this.state.html}  />\n        <div id=\"button-abs\">\n          <button onClick={this.copyHTML} id=\"btn-copy\"><AiFillCopy/></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}